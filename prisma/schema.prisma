// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  defaultSiteId Int?
  defaultSite   Site?      @relation(fields: [defaultSiteId], references: [id])
  Client        Client[]
  ownedClients  Client[]   @relation("ClientOwner")
  Release       Release[]
  AuditLog      AuditLog[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Settings {
  name  String @id @unique
  value String
}

model Site {
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  listenPort      Int     @default(51820)
  privateKey      String?
  publicKey       String
  endpointAddress String

  DNS            String?
  piholeDNS      String?
  localAddresses String
  postUp         String?
  postDown       String?

  configPath String  @default("/etc/wireguard/wg0.conf")
  hostname   String?

  User    User[]
  Release Release[]
  clients Client[]  @relation("ClientSites")
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enabled     Boolean  @default(true)
  name        String
  email       String?
  publicKey   String
  privateKey  String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  ownerId     String
  owner       User     @relation("ClientOwner", fields: [ownerId], references: [id])
  sites       Site[]   @relation("ClientSites")
}

model Release {
  hash        String   @id @unique
  SiteId      Int
  Site        Site     @relation(fields: [SiteId], references: [id])
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  data        String
}

model AuditLog {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  createdById    String
  createdBy      User     @relation(fields: [createdById], references: [id])
  actionType     String
  changedModel   String
  changedModelId Int
  data           String
}
