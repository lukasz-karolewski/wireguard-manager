// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// current provider is sqlite, and enums are not supported
// enum SettingsName {
//   wg_network
//   mode: "native_wg" | "edgerouter";
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  defaultSiteId Int?
  defaultSite   Site?     @relation(fields: [defaultSiteId], references: [id])
  Client        Client[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  name  String @id @unique
  value String
}

model Site {
  id              Int      @id
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  endpointAddress String
  DNS             String?
  PiholeDNS       String?
  ConfigPath      String   @default("/etc/wireguard/wg0.conf")
  PrivateKey      String?
  PublicKey       String
  localAddresses  String
  postUp          String?
  postDown        String?
  listenPort      Int      @default(51820)
  User            User[]
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enabled     Boolean  @default(true)
  name        String
  email       String?
  PublicKey   String
  PrivateKey  String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}
